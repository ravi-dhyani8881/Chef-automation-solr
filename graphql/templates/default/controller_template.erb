package com.spring.graph.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.stereotype.Controller;

import com.spring.graph.utils.QueryUtils;
import org.springframework.graphql.data.method.annotation.SchemaMapping;
import com.spring.graph.QueryResolver.<%= @file_name %>ResponseTemplate;
import com.spring.graph.QueryResolver.GenericQueryResolver;
import com.spring.graph.Model.Records<%= @file_name %>;
<% @relations.each do |relation| %>
	<% relation['table'].each do |table| %>
import com.spring.graph.QueryResolver.<%= table['name'] %>ResponseTemplate;
<% end %>
<% end %>

@Controller
public class <%= @file_name %>Controller {

	@Autowired
	GenericQueryResolver genericQueryResolver;
	
	@QueryMapping
    public <%= @file_name %>ResponseTemplate find<%= @file_name %>ByQuery(@Argument String query, @Argument String start,@Argument String rows, @Argument String filterField, @Argument String filterQuery,
    							  @Argument String sort,@Argument String advanceField,@Argument String advanceQuery,@Argument String advance,@Argument String field ) {
		return  genericQueryResolver.find<%= @file_name %>ByQuery(query, start, rows, filterField, filterQuery, sort, advanceField, advanceQuery, advance, field);	
    }
	  
	  <% @relations.each do |relation| %>
		<% relation['table'].each do |table| %>
			@SchemaMapping
			public <%= table['name'] %>ResponseTemplate find<%= table['name'] %>ByQuery(Records<%= @file_name %> content, @Argument String query, @Argument String start,@Argument String rows,
    												@Argument String filterField, @Argument String filterQuery,
    							  @Argument String sort,@Argument String advanceField,@Argument String advanceQuery,@Argument String advance,@Argument String field) throws Exception {
		String query2=QueryUtils.replaceTokens(query, content);	
		return genericQueryResolver.find<%= table['name'] %>ByQuery(query2, start, rows, filterField, filterQuery, sort, advanceField, advanceQuery, advance, field);
    }
	<% end %>
	<% end %>

	
}